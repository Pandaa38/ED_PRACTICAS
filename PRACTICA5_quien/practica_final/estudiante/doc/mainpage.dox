/*!
\mainpage El Juego de Quién es Quién

@image html Quien-es-quien.png "Quién es Quién"

\par Autores:
\b María \b Gallego \b Siles <br>
\b Juan \b Reche \b Aguilar

# ¿Qué es el TDA QuienEsQuien?

Nuestro TDA \b QuienEsQuien es una instancia que representa el conocido juego _Quién es Quién_. El objeto implícito queda representado por:

- \b personajes: vector<string> con los nombres de los personajes.
- \b atributos: vector<string> con los nombres de los atributos.
- \b tablero: vector<vector<bool>> tablero de características para cada personaje. En cada fila hay un personaje, y en cada columna se representa un atributo.
  - Si el personaje de la fila \e i tiene el atributo de la columna \e j, entonces tablero[i][j] == true.
  - En caso contrario, se tendrá tablero[i][j] == false.
  - El tamaño del tablero es size(personajes) x size(atributos).
- \b arbol: bintree<Pregunta> que representa un árbol de preguntas para adivinar personajes.
  - Cada nodo del árbol contiene una pregunta, formada por el atributo que se pregunta y el número de personajes que quedan en la rama.
- \b jugada_actual: bintree<Pregunta>::node que representa el nodo en el que nos encontramos.
- \b personajes_images: vector<string> con los nombres de las imágenes de los personajes en disco (para jugar en modo gráfico).
- \b tg: puntero a un objeto de la clase TableroGrafico (para jugar en modo gráfico).
- \b con: puntero a un objeto de la clase Consola (para jugar en modo gráfico).
- \b imagen_ocultar: string con el nombre de la imagen en disco para ocultar un personaje en el tablero gráfico (para jugar en modo gráfico).
- \b modo_graph: bool que representa un indicador para determinar si se juega en modo gráfico o texto.


Nuestro TDA \b QuienEsQuien cuenta con métodos que nos permiten jugar al juego. Entre ellos vamos a hablar de los
métodos adicionales que han sido implementados:
## Métodos Públicos

1. \b void preguntas_formuladas(bintree<Pregunta>::node jugada)
   <br>Aplica este método sobre un nodo del árbol para obtener una descripción de las preguntas formuladas anteriormente y las respuestas dadas por el usuario hasta el momento.

2. \b void aniade_personaje(string nombre, vector<bool> caracteristicas, string nombre_imagen_personaje = "");
   <br>Inserta un nuevo personaje en el árbol ya construido, dado:
   - \b nombre: nombre del personaje.
   - \b caracteristicas: vector de características (bool) del mismo tamaño y orden que los atributos especificados.
   - \b nombre_imagen_personaje: nombre de la imagen del personaje en disco (opcional).

3. \b void elimina_personaje(string nombre);
   <br>Elimina un personaje del árbol ya construido, dado su nombre.

## Métodos Privados

1. \b void reorganizar_tablero(int pos_mejor_atributo, int indice_atributo);
   <br>Reorganiza el tablero y los atributos del objeto implícito tras encontrar una pregunta que es mejor que la que tocaría realizar según el orden de atributos.
   - \b pos_mejor_atributo: posición del vector de atributos, que indica el mejor atributo para preguntar.
   - \b indice_atributo: posición inicial en el vector de atributos donde aún no se han realizado preguntas.

2. \b void MejorPregunta(const vector<bool>& personajes_restantes, int indice_atributo);
   <br>Escoge la mejor pregunta teniendo en cuenta las preguntas ya realizadas
   La mejor pregunta es aquella cuyo vector de atributos (columnas del tablero) <br>tiene el número de true y false más equilibrado.
   Esto ocurre cuando el número de true o false es aproximadamente igual a num_personajes_vivos / 2.
   En cada iteración:
   - Se ajusta ligeramente la proporción de true o false para encontrar una distribución óptima.
   - La pregunta seleccionada será aquella que mejor divida los personajes restantes en dos grupos casi iguales.
   - \b personajes_restantes: vector booleano que indica los personajes vivos en la rama.
   - \b indice_atributo: posición inicial en el vector de atributos.

## Mejoras en la creación del árbol de preguntas

- Al crear el árbol, se llama a MejorPregunta para modificar los atributos y el tablero del objeto implícito.
- Posteriormente, se eliminan nodos redundantes (nodos con un único hijo), ya que realizar esas preguntas no descarta ningún personaje.
- Los nodos redundantes se eliminan sustituyéndolos por su único hijo.

## Ejecutables

- [\ref consola]: Documentación del ejecutable relacionado con la clase Consola.
- [\ref pregunta]: Documentación del ejecutable relacionado con la clase Pregunta.
- [\ref quienesquien]: Documentación del ejecutable relacionado con la clase QuienEsQuien.
- [\ref tablerografico]: Documentación del ejecutable relacionado con la clase TableroGrafico.
- [\ref ventana]: Documentación del ejecutable relacionado con la clase Ventana.
*/




